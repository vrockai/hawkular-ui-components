/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics.pluginName = "hawkular-metrics";
    HawkularMetrics.log = Logger.get(HawkularMetrics.pluginName);
    HawkularMetrics.templatePath = "plugins/metrics/html";
    HawkularMetrics.globalTenantId = "test";
    HawkularMetrics.globalMetricId = "";
    HawkularMetrics.globalResourceUrl = "";
    HawkularMetrics.globalResourceList = [];
    HawkularMetrics.globalChartTimeRange;
    var ChartTimeRange = (function () {
        function ChartTimeRange(initialHoursDifference) {
            this.initialHoursDifference = initialHoursDifference;
            this.init();
        }
        ChartTimeRange.prototype.init = function () {
            this.endTimestamp = moment().valueOf();
            this.startTimestamp = moment().subtract('hour', this.initialHoursDifference).valueOf();
        };
        ChartTimeRange.prototype.getStartDate = function () {
            return new Date(this.startTimestamp);
        };
        ChartTimeRange.prototype.getEndDate = function () {
            return new Date(this.endTimestamp);
        };
        ChartTimeRange.prototype.getFormattedTimeRange = function () {
            return moment(this.startTimestamp).format('H:mm') + ' - ' + moment(this.endTimestamp).format('H:mm') + ' (' + moment(this.endTimestamp).from(moment(this.startTimestamp), true) + ')';
        };
        return ChartTimeRange;
    })();
    HawkularMetrics.ChartTimeRange = ChartTimeRange;
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    HawkularMetrics._module = angular.module(HawkularMetrics.pluginName, ['ngResource', 'ui.select', 'hawkularCharts', 'hawkular.services', 'ui.bootstrap', 'topbar']);
    var metricsTab;
    HawkularMetrics._module.config(['$httpProvider', '$locationProvider', '$routeProvider', 'HawtioNavBuilderProvider', function ($httpProvider, $locationProvider, $routeProvider, navBuilder) {
        metricsTab = navBuilder.create().id(HawkularMetrics.pluginName).title(function () { return 'Metrics'; }).href(function () { return '/metrics'; }).subPath('Add Url', 'addUrl', navBuilder.join(HawkularMetrics.templatePath, 'add-url.html')).subPath('Home', 'home', navBuilder.join(HawkularMetrics.templatePath, 'home.html')).subPath('Response Time', 'responseTime', navBuilder.join(HawkularMetrics.templatePath, 'response-time.html')).subPath('Up/Downtime', 'upDowntime', navBuilder.join(HawkularMetrics.templatePath, 'up-downtime.html')).subPath('Alerts', 'alerts', navBuilder.join(HawkularMetrics.templatePath, 'alerts.html')).build();
        navBuilder.configureRouting($routeProvider, metricsTab);
        $locationProvider.html5Mode(true);
    }]);
    HawkularMetrics._module.run(['HawtioNav', function (HawtioNav) {
        HawtioNav.add(metricsTab);
        HawkularMetrics.log.debug('loaded Metrics Plugin');
    }]);
    HawkularMetrics._module.directive('hkEnter', function () {
        return function (scope, element, attrs) {
            element.bind('keydown keypress', function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.hkEnter);
                    });
                    event.preventDefault();
                }
            });
        };
    });
    HawkularMetrics._module.config(["$routeProvider", function ($routeProvider) {
        $routeProvider.when('/metrics/responseTime', { templateUrl: 'plugins/metrics/html/response-time.html', resolve: {
            hkResourceList: function ($filter, $location, $q, HawkularInventory) {
                var resPromise = HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }).$promise;
                resPromise.then(function (hkResourceList) {
                    $location.path('/metrics/responseTime/' + hkResourceList[0].id);
                }, function () {
                    $location.url('/error');
                });
                return $q.defer().promise;
            }
        } }).when('/metrics/responseTime/:resourceId/', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/responseTime/:resourceId/:rangeStart', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/responseTime/:resourceId/:rangeStart/:rangeEnd', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/availability/:resourceId', { templateUrl: 'plugins/metrics/html/response-time.html' }).when('/metrics/alerts/:resourceId', { templateUrl: 'plugins/metrics/html/alerts.html' });
    }]);
    hawtioPluginLoader.addModule(HawkularMetrics.pluginName);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var AddUrlController = (function () {
        function AddUrlController($location, $scope, $rootScope, $log, $filter, HawkularInventory, HawkularMetric, HawkularAlert, DataResource, HawkularAlertsManager, resourceUrl) {
            this.$location = $location;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$log = $log;
            this.$filter = $filter;
            this.HawkularInventory = HawkularInventory;
            this.HawkularMetric = HawkularMetric;
            this.HawkularAlert = HawkularAlert;
            this.DataResource = DataResource;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.resourceUrl = resourceUrl;
            this.httpUriPart = 'http://';
            $scope.vm = this;
            this.resourceUrl = this.httpUriPart;
            this.resourceList = this.getResourceList();
        }
        AddUrlController.prototype.addUrl = function (url) {
            var _this = this;
            var resource = {
                type: 'URL',
                id: '',
                parameters: {
                    url: url
                }
            };
            this.$log.info('Adding new Resource Url to Hawkular-inventory: ' + url);
            HawkularMetrics.globalChartTimeRange = new HawkularMetrics.ChartTimeRange(1);
            var globalMetricId;
            this.HawkularInventory.Resource.save({ tenantId: HawkularMetrics.globalTenantId }, resource).$promise.then(function (newResource) {
                _this.DataResource.updateResources();
                globalMetricId = newResource.id;
                HawkularMetrics.globalResourceUrl = resource.parameters.url;
                console.dir(newResource);
                _this.$log.info('New Resource ID: ' + globalMetricId + ' created for url: ' + HawkularMetrics.globalResourceUrl);
                var metrics = [{
                    name: globalMetricId + '.status.duration',
                    unit: 'MILLI_SECOND',
                    description: 'Response Time in ms.'
                }, {
                    name: globalMetricId + '.status.code',
                    unit: 'NONE',
                    description: 'Status Code'
                }];
                _this.HawkularInventory.Metric.save({
                    tenantId: HawkularMetrics.globalTenantId,
                    resourceId: newResource.id
                }, metrics).$promise.then(function (newMetrics) {
                    toastr.info('Your data is being collected. Please be patient (should be about another minute).');
                    _this.$location.url('/metrics/responseTime/' + newResource.id);
                });
            }).then(function () {
                return _this.HawkularAlertsManager.getAction('myemail@company.com');
            }).then(function (data) {
                _this.$log.debug('Default action', data);
                if (!data) {
                    _this.$log.debug('Default action does not exist, creating one');
                    return _this.HawkularAlertsManager.createAction('myemail@company.com');
                }
                else {
                    _this.$log.debug('Default does already exist');
                }
            }).then(function () {
                console.log('metric', globalMetricId);
                return _this.HawkularAlertsManager.createTrigger(globalMetricId + '_trigger_thres', true, 'THRESHOLD', 'myemail@company.com');
            }).then(function (alert) {
                console.log('alert', alert);
                return _this.HawkularAlertsManager.createTrigger(globalMetricId + '_trigger_avail', false, 'AVAILABILITY', 'myemail@company.com');
            });
        };
        AddUrlController.prototype.getResourceList = function () {
            var _this = this;
            return this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }, function (aResourceList) {
                _this.resourceList = aResourceList;
                angular.forEach(_this.resourceList, function (res, idx) {
                    this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: HawkularMetrics.globalTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.duration'),
                        start: moment().subtract(1, 'hour').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['responseTime'] = resource;
                    });
                    this.HawkularMetric.NumericMetricData.queryMetrics({
                        tenantId: HawkularMetrics.globalTenantId,
                        resourceId: res.id,
                        numericId: (res.id + '.status.code'),
                        start: moment().subtract(1, 'hour').valueOf(),
                        end: moment().valueOf()
                    }, function (resource) {
                        res['isUp'] = (resource[0].value >= 200 && resource[0].value < 300);
                        var upTime = 0;
                        for (var i = 0; i < resource.length; i++) {
                            if (resource[i].value >= 200 && resource[i].value < 300) {
                                upTime++;
                            }
                        }
                        res['availability'] = upTime / resource.length * 100;
                        res['downTime'] = resource.length - upTime;
                    });
                    this.HawkularAlert.Alert.query({ query: res.id, start: moment().subtract(1, 'hour').valueOf(), end: moment().valueOf() }, function (alertsList) {
                        res['alerts'] = [];
                        for (var i = 0; i < alertsList.length; i++) {
                            if (alertsList[i].evalSets[0][0].condition.dataId.indexOf(res.id) === 0) {
                                res['alerts'].push(alertsList[i].evalSets[0][0]);
                            }
                        }
                    });
                    res['updateTime'] = new Date();
                }, _this);
            });
        };
        AddUrlController.prototype.getAverage = function (data, field) {
            if (data) {
                var sum = 0;
                for (var i = 0; i < data.length; i++) {
                    sum += parseInt(data[i][field], 10);
                }
                return Math.round(sum / data.length);
            }
        };
        AddUrlController.prototype.deleteResource = function (resource) {
            var _this = this;
            this.HawkularInventory.Resource.delete({
                tenantId: HawkularMetrics.globalTenantId,
                resourceId: resource.id
            }).$promise.then(function (res) {
                toastr.info('The site ' + resource.parameters.url + ' is no longer being monitored.');
                _this.resourceList = _this.getResourceList();
            });
        };
        AddUrlController.$inject = ['$location', '$scope', '$rootScope', '$log', '$filter', 'HawkularInventory', 'HawkularMetric', 'HawkularAlert', 'DataResource', 'HawkularAlertsManager'];
        return AddUrlController;
    })();
    HawkularMetrics.AddUrlController = AddUrlController;
    HawkularMetrics._module.controller('HawkularMetrics.AddUrlController', AddUrlController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var HawkularAlertsManager = (function () {
        function HawkularAlertsManager(HawkularAlert) {
            this.HawkularAlert = HawkularAlert;
        }
        HawkularAlertsManager.prototype.createTrigger = function (triggerName, enabled, conditionType, email) {
            var _this = this;
            var triggerId;
            return this.HawkularAlert.Trigger.save({
                name: triggerName,
                id: triggerName,
                description: 'Created on ' + Date(),
                firingMatch: 'ALL',
                safetyMatch: 'ALL',
                enabled: enabled,
                safetyEnabled: false,
                actions: [email]
            }).$promise.then(function (trigger) {
                triggerId = trigger.id;
                console.log('trigger...Id', trigger);
                var dataId = trigger.name.slice(0, -14) + '.status.duration';
                console.log('dataId', dataId);
                if (conditionType === 'THRESHOLD') {
                    return _this.createCondition(triggerId, {
                        type: conditionType,
                        triggerId: triggerId,
                        threshold: 1000,
                        dataId: dataId,
                        operator: 'GT'
                    });
                }
                else if (conditionType === 'AVAILABILITY') {
                    return _this.createCondition(triggerId, {
                        type: conditionType,
                        triggerId: triggerId,
                        dataId: dataId,
                        operator: 'DOWN'
                    });
                }
            }).then(function (condition) {
                console.log('c triggerId', condition[0]);
                if (conditionType === 'THRESHOLD') {
                    return _this.createDampening(triggerId, 7000);
                }
            });
        };
        HawkularAlertsManager.prototype.getAction = function (email) {
            return this.HawkularAlert.Action.get({
                actionId: email
            }).$promise;
        };
        HawkularAlertsManager.prototype.createAction = function (email) {
            return this.HawkularAlert.Action.save({
                actionPlugin: 'email',
                actionId: email,
                description: 'Created on ' + Date(),
                to: email
            }).$promise;
        };
        HawkularAlertsManager.prototype.createCondition = function (triggerId, condition) {
            return this.HawkularAlert.Condition.save({ triggerId: triggerId }, condition).$promise;
        };
        HawkularAlertsManager.prototype.createDampening = function (triggerId, duration) {
            return this.HawkularAlert.Dampening.save({ triggerId: triggerId }, {
                triggerId: triggerId,
                evalTimeSetting: duration
            }).$promise;
        };
        HawkularAlertsManager.prototype.getActions = function (triggerId) {
            return undefined;
        };
        HawkularAlertsManager.prototype.getTrigger = function (triggerId) {
            return this.HawkularAlert.Trigger.get({ triggerId: triggerId }).$promise;
        };
        HawkularAlertsManager.prototype.setEmail = function (triggerId, email) {
            var _this = this;
            var actions = this.getActions(triggerId);
            return actions.then(function (actions) {
                if (!actions) {
                    return _this.HawkularAlert.Action.save({}).$promise;
                }
                else {
                    return _this.HawkularAlert.Action.put({
                        actionId: ''
                    }, {}).$promise;
                }
            });
        };
        HawkularAlertsManager.prototype.updateCondition = function (triggerId, conditionId, treshold) {
            return this.HawkularAlert.Condition.put({
                triggerId: triggerId,
                conditionId: conditionId
            }, {
                treshold: treshold
            }).$promise;
        };
        HawkularAlertsManager.prototype.updateDampening = function (triggerId, dampeningId, duration) {
            return this.HawkularAlert.Dampening.put({
                triggerId: triggerId,
                dampeningId: dampeningId
            }, {
                duration: duration
            }).$promise;
        };
        HawkularAlertsManager.prototype.setResponseTime = function (triggerId, treshold, duration, enabled) {
            return undefined;
        };
        HawkularAlertsManager.prototype.setDowntime = function (triggerId, duration, enabled) {
            return undefined;
        };
        HawkularAlertsManager.$inject = ['HawkularAlert'];
        return HawkularAlertsManager;
    })();
    HawkularMetrics.HawkularAlertsManager = HawkularAlertsManager;
    HawkularMetrics._module.service('HawkularAlertsManager', HawkularAlertsManager);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsAlertController = (function () {
        function MetricsAlertController($scope, HawkularAlert, HawkularAlertsManager, $log, $q, $rootScope, $routeParams, alertList) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.$log = $log;
            this.$q = $q;
            this.$rootScope = $rootScope;
            this.$routeParams = $routeParams;
            this.alertList = alertList;
            this.$log.debug('querying data');
            this.$log.debug('$routeParams', $routeParams.resourceId);
            this.metricId = $routeParams.resourceId;
            this.alertList = [];
            this.HawkularAlert.Alert.query({ tags: this.metricId }).$promise.then(function (data) {
                _this.$log.debug('querying data finished');
                _this.alertList = data;
            }, function (error) {
                _this.$log.debug('querying data error', error);
            });
        }
        MetricsAlertController.$inject = ['$scope', 'HawkularAlert', 'HawkularAlertsManager', '$log', '$q', '$rootScope', '$routeParams'];
        return MetricsAlertController;
    })();
    HawkularMetrics.MetricsAlertController = MetricsAlertController;
    HawkularMetrics._module.controller('MetricsAlertController', MetricsAlertController);
    var MetricsAlertSetupController = (function () {
        function MetricsAlertSetupController($scope, HawkularAlert, HawkularAlertsManager, $log, $q, $rootScope, $routeParams) {
            var _this = this;
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.HawkularAlertsManager = HawkularAlertsManager;
            this.$log = $log;
            this.$q = $q;
            this.$rootScope = $rootScope;
            this.$routeParams = $routeParams;
            this.$log.debug('querying data');
            this.$log.debug('$routeParams', $routeParams.resourceId);
            HawkularAlertsManager.getTrigger($routeParams.resourceId + '_trigger_thres').then(function (data) {
                _this.trigger_thres = data;
                _this.$log.debug('this.trigger_thres', _this.trigger_thres);
                return data;
            }).then(function () {
                return HawkularAlert.Dampening.query({ triggerId: $routeParams.resourceId + '_trigger_thres' }).$promise;
            }).then(function (data) {
                _this.trigger_thres_damp = data;
                _this.$log.debug('this.trigger_thres_damp', _this.trigger_thres_damp);
            }).then(function () {
                return HawkularAlert.Condition.query({ triggerId: $routeParams.resourceId + '_trigger_thres' }).$promise;
            }).then(function (data) {
                _this.trigger_thres_cond = data;
                _this.$log.debug('this.trigger_thres_cond', _this.trigger_thres_cond);
            });
            HawkularAlertsManager.getTrigger($routeParams.resourceId + '_trigger_avail').then(function (data) {
                _this.trigger_avail = data;
                _this.$log.debug('this.trigger_avail', _this.trigger_avail);
            }).then(function () {
                return HawkularAlert.Dampening.query({ triggerId: $routeParams.resourceId + '_trigger_thres' }).$promise;
            }).then(function (data) {
                _this.trigger_avail_damp = data;
                _this.$log.debug('this.trigger_avail_damp', _this.trigger_avail_damp);
            });
            this.metricId = $routeParams.resourceId;
            this.$log.debug('this.metricId', this.metricId);
        }
        MetricsAlertSetupController.prototype.save = function () {
            this.$log.debug('Saving Alert Settings');
        };
        MetricsAlertSetupController.$inject = ['$scope', 'HawkularAlert', 'HawkularAlertsManager', '$log', '$q', '$rootScope', '$routeParams'];
        return MetricsAlertSetupController;
    })();
    HawkularMetrics.MetricsAlertSetupController = MetricsAlertSetupController;
    HawkularMetrics._module.controller('MetricsAlertSetupController', MetricsAlertSetupController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsAvailabilityController = (function () {
        function MetricsAvailabilityController($scope, $interval, $log, HawkularMetric, $routeParams, startTimeStamp, endTimeStamp) {
            var _this = this;
            this.$scope = $scope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.$routeParams = $routeParams;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.availabilityDataPoints = [];
            this.availabilityPercent = 0;
            this.downTimeDuration = 0;
            this.downTimeEvents = 0;
            $scope.vm = this;
            this.startTimeStamp = moment().subtract(1, 'hours').toDate();
            this.endTimeStamp = new Date();
            $scope.$on('RefreshAvailabilityChart', function (event) {
                _this.refreshAvailChartDataNow(_this.getMetricId());
            });
            this.onCreate($routeParams.resourceId);
        }
        MetricsAvailabilityController.prototype.onCreate = function (curResourceId) {
            this.autoRefreshAvailability(60);
        };
        MetricsAvailabilityController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh Availability');
        };
        MetricsAvailabilityController.prototype.autoRefreshAvailability = function (intervalInSeconds) {
            var _this = this;
            this.refreshHistoricalAvailDataForTimestamp(this.getMetricId());
            this.autoRefreshPromise = this.$interval(function () {
                _this.endTimeStamp = new Date();
                _this.refreshHistoricalAvailDataForTimestamp(_this.getMetricId());
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsAvailabilityController.prototype.noDataFoundForId = function (id) {
            this.$log.warn('No Data found for id: ' + id);
        };
        MetricsAvailabilityController.prototype.refreshAvailChartDataNow = function (metricId, startTime) {
            var adjStartTimeStamp = moment().subtract('hours', 1).toDate();
            this.endTimeStamp = new Date();
            this.refreshHistoricalChartData(metricId, angular.isUndefined(startTime) ? adjStartTimeStamp : startTime, this.endTimeStamp);
        };
        MetricsAvailabilityController.prototype.refreshHistoricalChartData = function (metricId, startDate, endDate) {
            this.refreshHistoricalAvailDataForTimestamp(metricId, startDate.getTime(), endDate.getTime());
        };
        MetricsAvailabilityController.prototype.getMetricId = function () {
            return MetricsAvailabilityController.getResourceCodeMetricId();
        };
        MetricsAvailabilityController.getResourceCodeMetricId = function () {
            return HawkularMetrics.globalMetricId + '.status.code';
        };
        MetricsAvailabilityController.prototype.refreshHistoricalAvailDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (!endTime) {
                endTime = this.endTimeStamp.getTime();
            }
            if (!startTime) {
                startTime = this.startTimeStamp.getTime();
            }
            if (metricId) {
                this.HawkularMetric.AvailabilityMetricData.query({
                    tenantId: HawkularMetrics.globalTenantId,
                    availabilityId: metricId
                }).$promise.then(function (response) {
                    _this.availabilityDataPoints = _this.formatAvailability(response);
                    console.info("Availability: ");
                    console.dir(_this.availabilityDataPoints);
                    _this.availabilityPercent = .95;
                    _this.downTimeDuration = 44;
                    _this.lastDownTime = moment().subtract('hours', 2).toDate();
                    _this.downTimeEvents = 2;
                    if (_this.availabilityDataPoints.length) {
                        _this.chartData = {
                            id: metricId,
                            startTimeStamp: _this.startTimeStamp,
                            endTimeStamp: _this.endTimeStamp,
                            dataPoints: _this.availabilityDataPoints,
                            annotationDataPoints: []
                        };
                    }
                    else {
                        _this.noDataFoundForId(_this.getMetricId());
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Avail data');
                    toastr.error('Error Loading Avail Data: ' + error);
                });
            }
        };
        MetricsAvailabilityController.prototype.formatAvailability = function (response) {
            return _.map(response, function (point) {
                return {
                    timestamp: point.start,
                    date: new Date(point.start),
                    value: !angular.isNumber(point.value) ? 0 : point.value,
                    avg: (point.empty) ? 0 : point.avg,
                    min: !angular.isNumber(point.min) ? 0 : point.min,
                    max: !angular.isNumber(point.max) ? 0 : point.max,
                    percentile95th: !angular.isNumber(point.percentile95th) ? 0 : point.percentile95th,
                    median: !angular.isNumber(point.median) ? 0 : point.median,
                    empty: point.empty
                };
            });
        };
        MetricsAvailabilityController.$inject = ['$scope', '$interval', '$log', 'HawkularMetric', '$routeParams'];
        return MetricsAvailabilityController;
    })();
    HawkularMetrics.MetricsAvailabilityController = MetricsAvailabilityController;
    HawkularMetrics._module.controller('MetricsAvailabilityController', MetricsAvailabilityController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var QuickAlertController = (function () {
        function QuickAlertController($scope, HawkularAlert, $log, $q) {
            this.$scope = $scope;
            this.HawkularAlert = HawkularAlert;
            this.$log = $log;
            this.$q = $q;
            this.PROMISE_BREAK = 'magicValue1234';
            this.$scope.showQuickAlert = false;
            this.$scope.quickTrigger = {
                operator: 'LT',
                threshold: 0
            };
            this.allActions();
        }
        QuickAlertController.prototype.toggleQuickAlert = function () {
            this.$scope.showQuickAlert = !this.$scope.showQuickAlert;
        };
        QuickAlertController.prototype.allActions = function () {
            var _this = this;
            this.$scope.actions = [];
            this.HawkularAlert.Action.query(function (result) {
                _this.$scope.actions = result;
            }, function (error) {
                _this.errorToastr(error, 'Error loading Alerts Notifiers:');
            });
        };
        QuickAlertController.prototype.errorToastr = function (error, errorMsg) {
            var errorMsgComplete;
            if (error.data && error.data.errorMsg) {
                errorMsgComplete = error.data.errorMsg;
            }
            else {
                errorMsgComplete = errorMsg + ' ' + error;
            }
            this.$log.error(errorMsgComplete);
            toastr.error(errorMsgComplete);
        };
        QuickAlertController.prototype.errorHandler = function (error, msg) {
            if (error !== this.PROMISE_BREAK) {
                this.errorToastr(error, msg);
            }
            return this.$q.reject(this.PROMISE_BREAK);
        };
        QuickAlertController.prototype.saveQuickAlert = function () {
            var _this = this;
            if (HawkularMetrics.globalMetricId !== '.status.duration' && HawkularMetrics.globalMetricId !== '.status.code') {
                var newTrigger = {};
                newTrigger.name = HawkularMetrics.globalMetricId + 'ResponseTime' + '-' + this.$scope.quickTrigger.operator + '-' + this.$scope.quickTrigger.threshold;
                newTrigger.description = 'Created on ' + new Date();
                newTrigger.firingMatch = 'ALL';
                newTrigger.safetyMatch = 'ALL';
                newTrigger.enabled = true;
                newTrigger.safetyEnabled = false;
                newTrigger.actions = this.$scope.quickTrigger.actions;
                var newDampening = {
                    triggerId: '',
                    type: 'RELAXED_COUNT',
                    evalTrueSetting: 1,
                    evalTotalSetting: 1,
                    evalTimeSetting: 0
                };
                this.HawkularAlert.Trigger.save(newTrigger).$promise.then(function (trigger) {
                    _this.$log.debug('Success Trigger save');
                    newDampening.triggerId = trigger.id;
                    return _this.HawkularAlert.Dampening.save({ triggerId: newDampening.triggerId }, newDampening).$promise;
                }, function (error) {
                    return _this.errorHandler(error, 'Error saving Trigger');
                }).then(function (dampening) {
                    _this.$log.debug('Success Dampening save', dampening);
                    var newThresholdCondition = {
                        triggerId: dampening.triggerId,
                        type: 'THRESHOLD',
                        dataId: HawkularMetrics.globalMetricId,
                        operator: _this.$scope.quickTrigger.operator,
                        threshold: _this.$scope.quickTrigger.threshold
                    };
                    return _this.HawkularAlert.Condition.save({ triggerId: newThresholdCondition.triggerId }, newThresholdCondition).$promise;
                }, function (errorDampening) {
                    return _this.errorHandler(errorDampening, 'Error saving Trigger');
                }).then(function () {
                    _this.$log.debug('Success ThresholdCondition save');
                    _this.$log.debug('Alert Created!');
                    toastr.success('Alert Created!');
                    _this.toggleQuickAlert();
                    return _this.HawkularAlert.Alert.reload().$promise;
                }, function (errorCondition) {
                    return _this.errorHandler(errorCondition, 'Error saving Trigger Condition');
                }).then(angular.noop, function (errorReload) {
                    return _this.errorHandler(errorReload, 'Error reloading Alerts');
                }).catch(function (error) {
                    _this.errorHandler(error, 'Error:');
                });
            }
            else {
                this.$log.debug('No metric selected');
                toastr.warning('No metric selected');
            }
        };
        QuickAlertController.$inject = ['$scope', 'HawkularAlert', '$log', '$q'];
        return QuickAlertController;
    })();
    HawkularMetrics.QuickAlertController = QuickAlertController;
    HawkularMetrics._module.controller('QuickAlertController', QuickAlertController);
})(HawkularMetrics || (HawkularMetrics = {}));

var HawkularMetrics;
(function (HawkularMetrics) {
    var MetricsViewController = (function () {
        function MetricsViewController($scope, $rootScope, $interval, $log, HawkularMetric, HawkularInventory, $routeParams, startTimeStamp, endTimeStamp) {
            var _this = this;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$interval = $interval;
            this.$log = $log;
            this.HawkularMetric = HawkularMetric;
            this.HawkularInventory = HawkularInventory;
            this.$routeParams = $routeParams;
            this.startTimeStamp = startTimeStamp;
            this.endTimeStamp = endTimeStamp;
            this.bucketedDataPoints = [];
            this.contextDataPoints = [];
            this._resourceList = [];
            this.median = 0;
            this.percentile95th = 0;
            this.average = 0;
            $scope.vm = this;
            this.startTimeStamp = moment().subtract(1, 'hours').toDate();
            this.endTimeStamp = new Date();
            $scope.$on('RefreshChart', function (event) {
                _this.refreshChartDataNow(_this.getMetricId());
            });
            this.onCreate($routeParams.resourceId);
        }
        Object.defineProperty(MetricsViewController.prototype, "resourceList", {
            get: function () {
                return this._resourceList;
            },
            set: function (newResourceList) {
                HawkularMetrics.globalResourceList = newResourceList;
                this._resourceList = newResourceList;
            },
            enumerable: true,
            configurable: true
        });
        MetricsViewController.prototype.onCreate = function (curResourceId) {
            var _this = this;
            this.autoRefresh(60);
            this.HawkularInventory.Resource.query({ tenantId: HawkularMetrics.globalTenantId }, function (aResourceList) {
                _this.resourceList = aResourceList;
                _this.selectedResource = _.last(_this._resourceList);
                for (var i = 0; i < _this._resourceList.length; i++) {
                    if (aResourceList[i].id === curResourceId) {
                        _this.selectedResource = _this._resourceList[i];
                    }
                }
                _this.refreshChartDataNow(_this.getMetricId());
            });
        };
        MetricsViewController.prototype.cancelAutoRefresh = function () {
            this.$interval.cancel(this.autoRefreshPromise);
            toastr.info('Canceling Auto Refresh');
        };
        MetricsViewController.prototype.autoRefresh = function (intervalInSeconds) {
            var _this = this;
            this.refreshHistoricalChartDataForTimestamp(this.getMetricId());
            this.autoRefreshPromise = this.$interval(function () {
                _this.endTimeStamp = new Date();
                _this.refreshHistoricalChartDataForTimestamp(_this.getMetricId());
                _this.refreshSummaryData(_this.getMetricId());
            }, intervalInSeconds * 1000);
            this.$scope.$on('$destroy', function () {
                _this.$interval.cancel(_this.autoRefreshPromise);
            });
        };
        MetricsViewController.prototype.noDataFoundForId = function (id) {
            this.$log.warn('No Data found for id: ' + id);
        };
        MetricsViewController.prototype.refreshChartDataNow = function (metricId, startTime) {
            var adjStartTimeStamp = moment().subtract('hours', 1).toDate();
            this.endTimeStamp = new Date();
            this.refreshHistoricalChartData(metricId, angular.isUndefined(startTime) ? adjStartTimeStamp : startTime, this.endTimeStamp);
            this.refreshSummaryData(metricId, startTime ? startTime.getTime() : adjStartTimeStamp.getTime(), this.endTimeStamp.getTime());
        };
        MetricsViewController.prototype.refreshHistoricalChartData = function (metricId, startDate, endDate) {
            this.refreshHistoricalChartDataForTimestamp(metricId, startDate.getTime(), endDate.getTime());
        };
        MetricsViewController.prototype.getMetricId = function () {
            return MetricsViewController.getResourceDurationMetricId();
        };
        MetricsViewController.getResourceDurationMetricId = function () {
            return HawkularMetrics.globalMetricId + '.status.duration';
        };
        MetricsViewController.prototype.refreshSummaryData = function (metricId, startTime, endTime) {
            var _this = this;
            var dataPoints;
            if (!endTime) {
                endTime = this.endTimeStamp.getTime();
            }
            if (!startTime) {
                startTime = this.startTimeStamp.getTime();
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 1
                }).$promise.then(function (response) {
                    dataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(dataPoints);
                    _this.median = Math.round(_.last(dataPoints).median);
                    _this.percentile95th = Math.round(_.last(dataPoints).percentile95th);
                    _this.average = Math.round(_.last(dataPoints).avg);
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.refreshHistoricalChartDataForTimestamp = function (metricId, startTime, endTime) {
            var _this = this;
            if (!endTime) {
                endTime = this.endTimeStamp.getTime();
            }
            if (!startTime) {
                startTime = this.startTimeStamp.getTime();
            }
            if (metricId) {
                this.HawkularMetric.NumericMetricData.queryMetrics({
                    tenantId: HawkularMetrics.globalTenantId,
                    numericId: metricId,
                    start: startTime,
                    end: endTime,
                    buckets: 60
                }).$promise.then(function (response) {
                    _this.bucketedDataPoints = _this.formatBucketedChartOutput(response);
                    console.dir(_this.bucketedDataPoints);
                    if (_this.bucketedDataPoints.length) {
                        _this.chartData = {
                            id: metricId,
                            startTimeStamp: startTime,
                            endTimeStamp: endTime,
                            dataPoints: _this.bucketedDataPoints,
                            contextDataPoints: _this.contextDataPoints,
                            annotationDataPoints: []
                        };
                    }
                    else {
                        _this.noDataFoundForId(_this.getMetricId());
                    }
                }, function (error) {
                    _this.$log.error('Error Loading Chart data');
                    toastr.error('Error Loading Chart Data: ' + error);
                });
            }
        };
        MetricsViewController.prototype.formatBucketedChartOutput = function (response) {
            return _.map(response, function (point) {
                return {
                    timestamp: point.start,
                    date: new Date(point.start),
                    value: !angular.isNumber(point.value) ? 0 : point.value,
                    avg: (point.empty) ? 0 : point.avg,
                    min: !angular.isNumber(point.min) ? 0 : point.min,
                    max: !angular.isNumber(point.max) ? 0 : point.max,
                    percentile95th: !angular.isNumber(point.percentile95th) ? 0 : point.percentile95th,
                    median: !angular.isNumber(point.median) ? 0 : point.median,
                    empty: point.empty
                };
            });
        };
        MetricsViewController.$inject = ['$scope', '$rootScope', '$interval', '$log', 'HawkularMetric', 'HawkularInventory', '$routeParams'];
        return MetricsViewController;
    })();
    HawkularMetrics.MetricsViewController = MetricsViewController;
    HawkularMetrics._module.controller('MetricsViewController', MetricsViewController);
})(HawkularMetrics || (HawkularMetrics = {}));

angular.module("hawkular-ui-components-metrics-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/metrics/html/add-url.html","<div ng-controller=\"HawkularMetrics.AddUrlController as vm\">\n  <div class=\"container text-center\">\n    <h1>Welcome Back {{username}}!</h1>\n    <h2 ng-show=\"resourcesList.length === 0\">Collect metrics from a website that you want to monitor.</h2>\n\n    <form class=\"form-horizontal add-url\" name=\"addUrlForm\" role=\"form\" novalidate ng-submit=\"vm.addUrl(vm.resourceUrl)\">\n      <div class=\"form-group input\">\n        <div class=\"col-lg-5 col-sm-6 align-center\">\n          <div class=\"input-group\" ng-class=\"{\'input-group-lg\': resourcesList.length === 0}\">\n            <input type=\"url\" class=\"form-control\" name=\"resourceUrl\" ng-model=\"vm.resourceUrl\"\n                   ng-model-options=\"{ updateOn: \'default blur\'}\"\n                   placeholder=\"Enter a website URL (e.g., http://mysite.com/home)\" required>\n            <span class=\"help-block\"\n                  ng-show=\"addUrlForm.resourceUrl.$dirty && addUrlForm.resourceUrl.$invalid\">The URL you entered is not valid. Please enter a valid URL.</span>\n              <span class=\"input-group-btn\">\n                   <button class=\"btn btn-primary\" ng-class=\"{\'btn-lg\': resourcesList.length === 0}\" type=\"submit\" ng-disabled=\"addUrlForm.$invalid\">\n                   Add URL\n                   </button>\n              </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group loading hide\">\n        <div class=\"spinner spinner-lg\"></div>\n        <button type=\"button\" class=\"btn btn-link\">Cancel</button>\n      </div>\n    </form>\n\n    <div class=\"row urls-list-labels\">\n      <div class=\"col-md-4 text-left\">\n        <button class=\"btn btn-link\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"Sort\">\n          URL <b class=\"caret\"></b>\n        </button>\n      </div>\n      <div class=\"col-md-4\">\n        Current Response Time\n      </div>\n      <div class=\"col-md-4\">\n        Current Availability\n      </div>\n    </div>\n\n    <div class=\"panel panel-default summary url-info\" ng-repeat=\"res in vm.resourceList\">\n      <div class=\"row row-table\">\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"url-link\"><a href=\"/metrics/responseTime/{{res.id}}\">{{res.parameters.url}}</a></span>\n          <button class=\"btn btn-link trigger\" tooltip=\"Expand/collapse\" ng-click=\"res.expanded = !res.expanded\"><i class=\"fa\" ng-class=\"res.expanded ? \'fa-minus-square-o\' : \'fa-plus-square-o\'\"></i>Last 24 hours</button>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\">{{res.responseTime[0].value}} <span>ms</span></span>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <span class=\"data\"><i class=\"fa \" ng-class=\"res.isUp ? \'fa-arrow-up\' : \'fa-arrow-down\'\"></i>{{res.isUp ? \'Up\' : \'Down\'}}</span>\n          <span class=\"update\" tooltip=\"Last update\"><i class=\"fa fa-clock-o\"></i>{{res.updateTime| date:\"HH:mm\" }}</span>\n        </div>\n      </div>\n      <hr ng-show=\"res.expanded\">\n      <div class=\"row row-table panel-expanded-content\" ng-show=\"res.expanded\">\n        <div class=\"col-md-4 summary-item text-left\">\n          <ul class=\"list-unstyled alert-status\" ng-hide=\"res.alerts.length === 0\">\n            <li ng-repeat=\"alert in res.alerts|limitTo:3\">\n              <i class=\"fa fa-flag\"></i>{{alert.dataTimestamp|date:\'yyyy-MM-dd HH:mm\'}}: <strong>{{alert.condition.type}}: {{alert.value}}</strong>\n            </li>\n          </ul>\n          <a href=\"/metrics/alerts/{{res.id}}\">View All Alerts ({{res.alerts.length}})</a>\n          <div class=\"data\" ng-show=\"res.alerts.length === 0\"><i class=\"fa fa-thumbs-o-up\"></i>No Alerts</div>\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <div id=\"metrics-chart\" class=\"top-area\" style=\"height: 44px; width: 237px;\">\n            <hawkular-chart data=\"{{res.responseTime}}\" chart-type=\"line\" chart-height=\"44\" chart-width=\"237\"></hawkular-chart>\n            <!--<img src=\"img/overview-graph.png\" alt=\"overview-graph\" width=\"237\" height=\"44\">-->\n          </div>\n          <div class=\"bottom-area\">\n            <span class=\"data\">{{vm.getAverage(res.responseTime, \'value\')}} <span>ms</span></span>\n            <span class=\"item\">Average Response Time</span>\n          </div>\n\n        </div>\n        <div class=\"col-md-4 summary-item\">\n          <div class=\"top-area\">\n            <span class=\"data\" ng-show=\"res.availability === 100\"><i class=\"fa fa-check\"></i>No Downtime</span>\n            <span class=\"data\" ng-hide=\"res.availability === 100\"><i class=\"fa fa-arrow-down\"></i>Down {{res.downTime}} min</span>\n          </div>\n          <div class=\"bottom-area\">\n            <span class=\"data\" ng-hide=\"res.availability === 100\">{{res.availability | number:3}} <span>%</span></span>\n            <span class=\"data\" ng-show=\"res.availability === 100\">{{res.availability}} <span>%</span></span>\n            <span class=\"item\">Availability</span>\n          </div>\n          <button class=\"btn btn-link delete\" tooltip=\"Delete\" ng-click=\"vm.deleteResource(res)\"><i class=\"fa fa-trash-o\"></i></button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-setup.html","<div class=\"alert-settings\">\n  <form class=\"form-horizontal\">\n    <fieldset>\n      <legend>Preferences</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Email</label>\n        <div class=\"col-md-6\">\n          <input type=\"text\" id=\"email\" class=\"form-control\"  ng-model=\"mas.trigger_thres.actions[0]\">\n          <span class=\"help-block\">Send alerts to this email address.</span>\n        </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Response Time</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Status</label>\n        <div class=\"col-md-6\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"trigger_thres.enabled\" class=\"onoffswitch-checkbox\" ng-model=\"mas.trigger_thres.enabled\">\n            <label class=\"onoffswitch-label\" for=\"trigger_thres.enabled\">\n                        <span class=\"onoffswitch-inner\">\n                          <span class=\"onoffswitch-active ng-binding\">ON</span>\n                          <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n                        </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Threshold and duration</label>\n        <div class=\"col-md-6 inline-row\">\n          <div class=\"input-group time\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Threshold\" ng-model=\"mas.trigger_thres_cond[0].threshold\">\n            <span class=\"input-group-addon\">ms</span>\n          </div>\n          <span class=\"between-inputs\">for</span>\n          <div class=\"input-group duration\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Duration\" ng-model=\"mas.trigger_thres_damp[0].evalTimeSetting\">\n            <select class=\"selectpicker\" style=\"display: none;\">\n              <option>miliseconds</option>\n              <option>seconds</option>\n              <option>minutes</option>\n              <option>hours</option>\n            </select><div class=\"btn-group bootstrap-select input-group-btn\"><button type=\"button\" class=\"btn dropdown-toggle selectpicker btn-default\" data-toggle=\"dropdown\" title=\"miliseconds\"><span class=\"filter-option pull-left\">miliseconds</span>&nbsp;<span class=\"caret\"></span></button><div class=\"dropdown-menu open\"><ul class=\"dropdown-menu inner selectpicker\" role=\"menu\"><li rel=\"0\" class=\"selected\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">miliseconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"1\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">seconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"2\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">minutes</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"3\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">hours</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li></ul></div></div>\n          </div>\n          <span class=\"help-block\">Send alerts when the response time is over 2000 ms for more than 3 minutes.</span>\n        </div>\n      </div>\n    </fieldset>\n    <fieldset>\n      <legend>Downtime</legend>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Status</label>\n        <div class=\"col-md-6\">\n          <div class=\"onoffswitch\">\n            <input type=\"checkbox\" id=\"trigger_avail.enabled\" name=\"trigger_avail.enabled\" class=\"onoffswitch-checkbox\" ng-model=\"mas.trigger_avail.enabled\">\n            <label class=\"onoffswitch-label\" for=\"trigger_avail.enabled\">\n                        <span class=\"onoffswitch-inner\">\n                          <span class=\"onoffswitch-active ng-binding\">ON</span>\n                          <span class=\"onoffswitch-inactive ng-binding\">OFF</span>\n                        </span>\n              <span class=\"onoffswitch-switch\"></span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-2 control-label\" for=\"email\">Duration</label>\n        <div class=\"col-md-6 inline-row\">\n          <div class=\"input-group duration\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Duration\" ng-model=\"mas.trigger_avail_damp[0].evalTimeSetting\">\n            <select class=\"selectpicker\" style=\"display: none;\">\n              <option>miliseconds</option>\n              <option>seconds</option>\n              <option>minutes</option>\n              <option>hours</option>\n            </select><div class=\"btn-group bootstrap-select input-group-btn\"><button type=\"button\" class=\"btn dropdown-toggle selectpicker btn-default\" data-toggle=\"dropdown\" title=\"miliseconds\"><span class=\"filter-option pull-left\">miliseconds</span>&nbsp;<span class=\"caret\"></span></button><div class=\"dropdown-menu open\"><ul class=\"dropdown-menu inner selectpicker\" role=\"menu\"><li rel=\"0\" class=\"selected\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">miliseconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"1\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">seconds</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"2\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">minutes</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li><li rel=\"3\"><a tabindex=\"0\" class=\"\" style=\"\"><span class=\"text\">hours</span><i class=\"glyphicon glyphicon-ok icon-ok check-mark\"></i></a></li></ul></div></div>\n          </div>\n          <span class=\"help-block\">Send alerts when the downtime lasts more than 2 minutes.</span>\n        </div>\n      </div>\n    </fieldset>\n    <div class=\"form-group\">\n      <div class=\"col-md-10 col-md-offset-2\">\n        <button type=\"button\" class=\"btn btn-primary\" ng-click=\"mas.save()\">Save</button>\n        <button type=\"button\" class=\"btn btn-default\">Cancel</button>\n      </div>\n    </div>\n  </form>\n\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts-view.html","<p class=\"info-top\"><strong>{{mac.alertList.length}} alerts</strong> last week.</p>\n\n<div class=\"alerts-activity\">\n  <div ng-repeat=\"alert in mac.alertList\">\n    <div class=\"panel panel-default alert alert-danger\">\n      <div class=\"alert-icon\">\n        <i class=\"fa fa-line-chart\"></i>\n      </div>\n      <div class=\"date\">\n        {{alert.ctime | date:\'medium\' }}\n      </div>\n      <div class=\"event\">\n        <strong>Response time</strong> was above the threshold for X minutes (until Y).\n\n        <br>\n\n        {{alert}}\n\n      </div>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/alerts.html","<div class=\"row\" >\n  <div class=\"col-md-12\">\n    <h1>Alerts</h1>\n    <tabset>\n      <tab heading=\"Alerts\">\n        <div ng-include=\"\'plugins/metrics/html/alerts-view.html\'\" ng-controller=\"MetricsAlertController as mac\"></div>\n      </tab>\n      <tab heading=\"Alerts Setup\">\n        <div ng-include=\"\'plugins/metrics/html/alerts-setup.html\'\" ng-controller=\"MetricsAlertSetupController as mas\"></div>\n      </tab>\n    </tabset>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/create-alert-form.html","<div ng-controller=\"QuickAlertController as qac\" ng-show=\"vm.chartData.dataPoints.length > 1\">\n  <div ng-show=\"!showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <button class=\"btn btn-primary pull-left\" ng-click=\"qac.toggleQuickAlert()\">Add an Alert</button>\n  </div>\n  <div ng-show=\"showQuickAlert\" class=\"col-sm-9 col-md-10 content\">\n    <h1>Add an Alert</h1>\n\n    <form class=\"form-horizontal\" name=\"addQuickAlertForm\" role=\"form\">\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\">\n          Fire when metric is\n        </label>\n\n        <div id=\"alert-radio-container\" class=\"col-md-4\">\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LT\"> <\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GT\"> >\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"LTE\"> <=\n          </label>\n          <label class=\"radio-inline\">\n            <input type=\"radio\" ng-model=\"quickTrigger.operator\" class=\"radio\" value=\"GTE\"> >=\n          </label>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"threshold\">\n          Of threshold\n        </label>\n\n        <div class=\"col-md-2\">\n          <input type=\"number\" id=\"threshold\" ng-model=\"quickTrigger.threshold\" class=\"form-control\"\n                 ng-minlength=\"1\" required>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-md-4 control-label\" for=\"actions\">\n          Notify to:\n        </label>\n\n        <div class=\"col-md-3\">\n          <ui-select id=\"actions\" multiple ng-model=\"quickTrigger.actions\" theme=\"bootstrap\"\n                     ng-disabled=\"disabled\" close-on-select=\"false\">\n            <ui-select-match placeholder=\"Select action...\">{{$item}}</ui-select-match>\n            <ui-select-choices repeat=\"action in actions | filter:$select.search\">\n              {{ action }}\n            </ui-select-choices>\n          </ui-select>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-md-offset-4 col-md-6\">\n          <button class=\"btn btn-primary\" ng-click=\"qac.saveQuickAlert()\">Create Alert</button>\n          <button type=\"button\" class=\"btn btn-default\" ng-click=\"qac.toggleQuickAlert()\">Cancel</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n");
$templateCache.put("plugins/metrics/html/response-time.html","<div ng-controller=\"MetricsViewController as vm\">\n\n  <div class=\"col-sm-9 col-md-10 content\">\n\n    <!--<div class=\"well\" id=\"control-bar\">-->\n            <!--<span class=\"col-md-3 col-sm-4 select-url-container\">-->\n                <!--<select class=\"form-control input-sm select-url\" ng-model=\"vm.selectedResource\"-->\n                        <!--ng-options=\"rs.parameters.url for rs in vm.resourceList\"></select>-->\n            <!--</span>-->\n    <!--</div>-->\n\n    <div class=\"col-sm-9 col-md-10 content response-time\">\n      <h1>Response Time</h1>\n\n      <div class=\"panel panel-default graph-summary\">\n        <div class=\"row\">\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">{{vm.average}} <span>ms</span></span>\n            <span class=\"item\">Average</span>\n          </div>\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">{{vm.median}} <span>ms</span></span>\n            <span class=\"item\">Median</span>\n          </div>\n          <div class=\"col-md-4 summary-item\">\n            <span class=\"data\">{{vm.percentile95th}} <span>ms</span></span>\n            <span class=\"item\">95th percentile</span>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"panel panel-default graph\">\n        <div class=\"legend pull-left\" ng-show=\"vm.chartData.dataPoints.length > 0\">\n          <span><i class=\"fa fa-circle primary\"></i>Response Time</span>\n          <span><i class=\"fa fa-circle danger\"></i>Response Time (above the threshold)</span>\n        </div>\n        <div class=\"update pull-right\" ng-show=\"vm.chartData.dataPoints.length > 0\" >\n          <i class=\"fa fa-clock-o\"></i><a ng-click=\"vm.refreshChartDataNow(vm.getMetricId())\"><strong>Last\n          update</strong> 1 minutes ago</a>\n        </div>\n\n        <p class=\"label label-info waiting-label\" ng-hide=\"vm.chartData.dataPoints.length > 0\" >We are\n          collecting your initial data. Please be patient(could be up to a minute)...</p>\n\n\n        <div id=\"metrics-chart\">\n          <!-- HINT: colors for the chart can be changed in the hawkular-charts.css -->\n          <hawkular-chart\n            data=\"{{vm.chartData.dataPoints}}\"\n            chart-type=\"hawkularmetric\"\n            alert-value=\"500\"\n            y-axis-units=\"Response Time (ms)\"\n            chart-height=\"250\">\n          </hawkular-chart>\n        </div>\n      </div>\n\n\n    </div>\n\n\n  </div>\n\n</div>\n\n\n");
$templateCache.put("plugins/metrics/html/up-downtime.html","<section class=\"availability\" ng-controller=\"MetricsAvailabilityController as vm\">\n\n  <h1>Availability</h1>\n\n  <div class=\"panel panel-default summary\">\n    <div class=\"row\">\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.availabilityPercent * 100}} %</span>\n        <span class=\"item\">Availability</span>\n      </div>\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.downTimeDuration}}</span>\n        <span class=\"item\">Total Downtime Duration</span>\n      </div>\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.lastDownTime | date:\'mediumDate\'}}</span>\n        <span class=\"item\">Last Downtime</span>\n      </div>\n      <div class=\"col-md-3 summary-item\">\n        <span class=\"data\">{{vm.downTimeEvents}}</span>\n        <span class=\"item\">Downtime Events</span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"panel panel-default graph\">\n    <div class=\"update pull-right\">\n      <i class=\"fa fa-clock-o\"></i><strong>Last update</strong> 1 minutes ago\n    </div>\n    <div>TODO: Avail Chart goes here...</div>\n  </div>\n\n</section><!-- .availability -->\n");}]); hawtioPluginLoader.addModule("hawkular-ui-components-metrics-templates");
//# sourceMappingURL=data:application/json;base64,